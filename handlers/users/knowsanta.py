from aiogram import types
from loader import dp, db, bot
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext

class namewish(StatesGroup):
   user = State()
   name = State()
   wish = State()

@dp.callback_query_handler(lambda callback_query: callback_query.data == "button2")
async def whoismysanta(callback_query: types.CallbackQuery):

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∏.
    # await message.answer("–ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞, –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º :)")

    list = []
    b = await db.read_all_enduser()
    x = len(b)
    print(x)

    for i in range (x):
        list.append(await db.read_enduser(i))

    print(list)

    if not list:
        print(123123123)
        await bot.send_message(chat_id=callback_query.from_user.id, text="–£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –∂–µ—Ä–µ–±—å—ë–≤–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º!)")

    for i in range(len(list)):
        z = list[i]
        print('z', z)
        if callback_query.from_user.id == z:
            if i+1 == len(list):
                kid = list[0]
            else:
                kid = list[i+1]
    print(kid)

    wish = await db.read_wish_data(kid)
    print(wish)
    name = await db.read_name_data(kid)

    await bot.send_message(chat_id=callback_query.from_user.id, text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–±–µ –¥–æ—Å—Ç–∞–ª—Å—è(-–∞—Å—å) {name}üéÑ \n \n"
    f"–¢–µ–ø–µ—Ä—å —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ :) –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤—å, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ... "
    f"\n–ù–µ —Ö–æ—á–µ—à—å- –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π, –º–Ω–µ —Ç–æ —á—Ç–æ)\n\n"
    f"–ï—Å–ª–∏ —Ä–µ—à–∏—à—å –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º –¥—Ä—É–≥–æ–º, –≤–æ—Ç —á–µ–≥–æ —Ö–æ—á–µ—Ç —Ç–≤–æ–π —á–µ–ª–æ–≤–µ—á–µ–∫) üéÅ \n\n"
    f"Wish list {name}: \n"
    f"{wish}")
    #
    # userdata = []
    # list1 =[]
    # file = open("data.txt", "r")
    # datanum = 0
    # urnum = 0
    # while True:
    #     line = file.readline()
    #     if not line:
    #         break
    #     try:
    #         letter=int(line.strip())
    #     except:
    #         OSError
    #         pass
    #
    #     if kid != letter:
    #         datanum += 1
    #     else:
    #         urnum = datanum
    #
    #     userdata.append(line)
    #
    #     list1.append(line.strip())
    #
    #
    # await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—É–¥–µ—Ç–µ –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –¥–ª—è {list1[urnum+1]}üéÑ \n \n"
    #                      f"–ü—Ä–æ—Å–∏–º —É—á–µ—Å—Ç—å, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, "
    #                      f"–∞ —Ç–∞–∫–∂–µ –±—ã—Ç—å –Ω–æ–º–∏–Ω–∞–ª–æ–º –¥–æ 10 000 ‚ÇΩ. \n\n"
    #                      f"–ù–∞–ø—Ä–∞–≤–ª—è–µ–º wish list –í–∞—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞ üéÅ \n\n"
    #                      f"Wish list {list1[urnum+1]}: \n"
    #                      f"{list1[urnum+2]}")

